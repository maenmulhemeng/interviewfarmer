{"version":3,"sources":["components/Farmers.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","Farmers","props","state","users","selectedUSer","files","getFiles","bind","chooseFile","submit","fetch","method","then","result","ok","json","r","setState","e","userid","preventDefault","user","find","id","newUser","map","console","log","this","file","target","formData","FormData","append","post","headers","newFiles","data","src","className","u","index","key","onClick","name","f","href","onSubmit","encType","type","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRACMA,EAAQC,EAAQ,IAgHPC,E,YA5Gb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,MAAM,GACNC,aAAa,CAACC,MAAM,KAEtB,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,OAAS,EAAKA,OAAOF,KAAZ,gBARE,E,iFAUE,IAAD,OAIjBG,MAAM,UADa,CAACC,OAAO,QAE1BC,MAAK,SAACC,GAEH,GAAGA,EAAOC,GACN,OAAOD,EAAOE,UAEnBH,MAAK,SAAAI,GAEJ,EAAKC,SAAS,CACVd,MAAOa,S,+BAKRE,EAAEC,GAAQ,IAAD,OAChBD,EAAEE,iBAEFV,MAAM,UAAUS,EAAO,UACtBP,MAAK,SAACC,GAEH,GAAGA,EAAOC,GACN,OAAOD,EAAOE,UAEnBH,MAAK,SAAAI,GACJ,IAAMK,EAAO,EAAKnB,MAAMC,MAAMmB,MAAK,SAAAJ,GAAC,OAAEA,EAAEK,IAAMJ,KACxCK,EAAO,eAAOH,EAAP,CAAYhB,MAAMW,IAC/B,EAAKC,SAAS,CACVd,MAAM,EAAKD,MAAMC,MAAMsB,KAAI,SAAAP,GAAC,OAAEA,EAAEK,IAAIJ,EAAQK,EAAQN,KACpDd,aAAaoB,IAEjBE,QAAQC,IAAI,EAAKzB,MAAMC,Y,iCAKlBe,GACTU,KAAKX,SAAS,CAACY,KAAKX,EAAEY,OAAOzB,MAAM,O,6BAG9Ba,GAAG,IAAD,OACLA,EAAEE,iBACF,IAAMW,EAAW,IAAIC,SACrBD,EAASE,OAAO,aAAaL,KAAK1B,MAAM2B,MAQxC/B,EAAMoC,KAAK,UAAUN,KAAK1B,MAAME,aAAamB,GAAG,SAASQ,EAL1C,CACbI,QAAS,CACL,eAAgB,yBAInBvB,MAAK,SAACC,GAEH,GAAGA,EAAO,CACR,IAAIuB,EAAQ,sBAAO,EAAKlC,MAAME,aAAaC,OAA/B,CAAqCQ,EAAOwB,KAAKC,MACzDd,EAAO,eAAO,EAAKtB,MAAME,aAAlB,CAA+BC,MAAM+B,IAChDV,QAAQC,IAAIH,GACV,EAAKP,SAAS,CACVb,aAAcoB,U,+BAKtB,IAAD,OAEP,OACE,yBAAKe,UAAU,OACX,6BAAShB,GAAG,kBACZ,+CAGA,wBAAIA,GAAG,WACNK,KAAK1B,MAAMC,MAAMsB,KAAI,SAACe,EAAEC,GAAH,OAAY,wBAAIC,IAAKD,GAAO,uBAAGE,QAAS,SAACzB,GAAD,OAAK,EAAKZ,SAASY,EAAEsB,EAAEjB,MAAOiB,EAAEI,YAGlG,6BAASrB,GAAG,sBACV,6CAGA,wBAAIA,GAAG,SACFK,KAAK1B,MAAME,aAAaC,MAAMoB,KAAI,SAACoB,EAAEJ,GAAH,OAAa,wBAAIC,IAAKD,GAAO,uBAAGK,KAAM,UAAUD,EAAEP,KAAMO,EAAEP,UAIjG,0BAAMS,SAAU,SAAC7B,GAAD,OAAK,EAAKT,OAAOS,IAAIK,GAAG,SAASZ,OAAO,OAAOqC,QAAQ,uBAEnE,2BAAOC,KAAK,OAAO1B,GAAG,aAAaqB,KAAK,aAAaM,SAAUtB,KAAKpB,aACpE,4BAAQyC,KAAK,UAAb,yB,GAtGUE,IAAMC,WCUbC,MARf,WACE,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,QCGce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,MAAK,SAAAsD,GACjCA,EAAaC,kB","file":"static/js/main.87e04914.chunk.js","sourcesContent":["import React from 'react';\r\nconst axios = require(\"axios\");\r\n\r\n//import './App.css';\r\nclass Farmers extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      users:[],    \r\n      selectedUSer:{files:[]}\r\n    }\r\n    this.getFiles = this.getFiles.bind(this);\r\n    this.chooseFile = this.chooseFile.bind(this);\r\n    this.submit = this.submit.bind(this);\r\n  }\r\n  componentDidMount(){    \r\n    \r\n    \r\n    const httpOptions ={method:'GET'};\r\n    fetch('/users/',httpOptions)\r\n    .then((result)=>{  \r\n        \r\n        if(result.ok){                        \r\n            return result.json();            \r\n        }\r\n    }).then(r=>{\r\n     //   console.log(r);\r\n        this.setState({\r\n            users: r\r\n        });\r\n    });\r\n  }\r\n\r\n  getFiles(e,userid){\r\n    e.preventDefault();\r\n    \r\n    fetch('/users/'+userid+'/files')\r\n    .then((result)=>{  \r\n        \r\n        if(result.ok){                        \r\n            return result.json();            \r\n        }\r\n    }).then(r=>{\r\n        const user = this.state.users.find(e=>e.id == userid);\r\n        const newUser = {...user,files:r};\r\n        this.setState({\r\n            users:this.state.users.map(e=>e.id==userid? newUser:e),\r\n            selectedUSer:newUser\r\n        })\r\n        console.log(this.state.users);  \r\n\r\n    });\r\n  }\r\n\r\n  chooseFile(e) {\r\n    this.setState({file:e.target.files[0]});\r\n    }\r\n\r\n  submit(e){\r\n      e.preventDefault();\r\n      const formData = new FormData();\r\n      formData.append('attachment',this.state.file);\r\n     \r\n      //const httpOptions ={method:'POST',headers: {'Content-Type':\"multipart/form-data\",data:formData},body:formData};\r\n      const config = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data'\r\n        }\r\n    };\r\n      axios.post('/users/'+this.state.selectedUSer.id+\"/files\",formData,config)        \r\n        .then((result)=>{  \r\n            \r\n            if(result){                        \r\n              var newFiles = [...this.state.selectedUSer.files,result.data.src];\r\n              var newUser = {...this.state.selectedUSer,files:newFiles};\r\n              console.log(newUser);\r\n                this.setState({\r\n                    selectedUSer: newUser\r\n                });              \r\n            }\r\n        });\r\n  }\r\n  render() {\r\n      \r\n    return (\r\n      <div className=\"App\">\r\n          <section id=\"farmersSection\">\r\n          <h2>\r\n              List of farmers\r\n          </h2>\r\n          <ul id=\"farmers\">\r\n          {this.state.users.map((u,index)=>(<li key={index}><a onClick={(e)=>this.getFiles(e,u.id)} >{u.name}</a></li>))}        \r\n          </ul>\r\n      </section>   \r\n      <section id=\"farmerFilesSection\">\r\n        <h2>\r\n            List of files\r\n        </h2>\r\n        <ul id=\"files\">\r\n            {this.state.selectedUSer.files.map((f,index) => <li key={index}><a href={\"images/\"+f.src}>{f.src}</a></li>)}\r\n        </ul>\r\n       \r\n\r\n        <form onSubmit={(e)=>this.submit(e)} id=\"farmer\" method=\"POST\" encType=\"multipart/form-data\">\r\n         \r\n            <input type=\"file\" id=\"attachment\" name=\"attachment\" onChange={this.chooseFile}/>\r\n            <button type=\"submit\">Submit Request</button>\r\n        </form>\r\n    </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Farmers;\r\n","import React from 'react';\n\nimport Farmers from './components/Farmers';\n\n//import './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Farmers />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}