{"version":3,"sources":["components/Note.js","components/FileList.js","components/NavbarBrand.js","components/MyHeader.js","components/MyFooter.js","components/Farmers.js","App.js","serviceWorker.js","index.js"],"names":["Note","props","Jumbotron","fluid","Container","Accordion","defaultActiveKey","Card","Header","Toggle","as","Button","variant","eventKey","Collapse","Body","FileList","id","Row","undefined","user","name","charAt","toUpperCase","substring","Col","ListGroup","files","map","f","index","Item","action","href","src","key","onSubmit","e","upload","method","encType","type","onChange","chooseFile","NavbarBrand","Navbar","Brand","link","width","height","alt","MyHeader","bg","className","Text","MyFooter","Image","axios","require","Farmers","state","users","selectedUSer","showList","getFiles","bind","submit","fetch","then","result","ok","json","r","setState","userid","preventDefault","this","find","newUser","console","log","file","target","formData","FormData","append","post","headers","newFiles","data","u","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8fdbf0a.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Container,Jumbotron,Accordion,Card,Button} from 'react-bootstrap';\r\nfunction Note(props){\r\n    return (\r\n      <Jumbotron fluid>\r\n        <Container>\r\n          <h1>Farmerathand Interview</h1>\r\n          <p>The idea of the project is so simple. The server sends a list of Farmers (users) allowing you \r\n            to navigate through them. Once you choose a farmer, the list of the farmer's files will be shown and an uploader component will be too. \r\n            You can upload a new file and notice the change that happens to the list. \r\n          </p>\r\n          <h2>You can find in this project</h2>\r\n          <Accordion defaultActiveKey=\"0\">\r\n            <Card>\r\n              <Card.Header>\r\n                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                  Client side\r\n                </Accordion.Toggle>\r\n              </Card.Header>\r\n              <Accordion.Collapse eventKey=\"0\">\r\n                <Card.Body>\r\n                <ol>\r\n                  <li>  Defining ReactJS Components</li>\r\n                  <li>  Using <b>Bootstrap</b> for React</li>\r\n                  <li>  Passing parameters/handlers from parents to childrens </li>\r\n                  <li>  Sending requests to the server sometimes when the component is mounted and sometimes when a button clicked using <b>Fetch</b> and <b>axios</b></li>            \r\n                  <li>  A special file to show how we can solve the save problem using older libraries like JQuery</li>\r\n                  \r\n                </ol>\r\n                </Card.Body>\r\n              </Accordion.Collapse>\r\n            </Card>\r\n            <Card>\r\n              <Card.Header>\r\n                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                Server side\r\n                </Accordion.Toggle>\r\n              </Card.Header>\r\n              <Accordion.Collapse eventKey=\"1\">\r\n                <Card.Body>\r\n                <ol>\r\n                  <li>  Defining an Express server</li>\r\n                  <li>  Defining a system architecture <b>Routes, Controllers, Models</b></li>            \r\n                  <li>  Defining REST handlers for <b>GET/POST/PUT/DELETE</b></li> \r\n                  <li>  Handling <b>MySQL</b> request using two patterns. The first one is achieved using an <i>ORM</i> library <b>Sequelize</b> and the other is built <b>from skratch</b></li>\r\n                  <li>  Handling uploading files using <b>Multer</b> which handles <b>multipart/form-data</b> </li>            \r\n                </ol>\r\n                </Card.Body>\r\n              </Accordion.Collapse>\r\n            </Card>                                           \r\n            </Accordion>\r\n        </Container>\r\n      </Jumbotron>\r\n    )\r\n  }\r\n  \r\n  export default Note;","import React from 'react';\r\nimport {Row,Col,ListGroup,Container,Jumbotron} from 'react-bootstrap';\r\n\r\nfunction FileList(props){\r\n    return (\r\n      <div id=\"farmerFilesSection\">\r\n      \r\n      <Container>\r\n          <Row>\r\n      <h4>\r\n          The files of {props.user.name!==undefined?props.user.name.charAt(0).toUpperCase() +props.user.name.substring(1):\"\"}\r\n      </h4>\r\n      </Row>\r\n      <Row>\r\n          <Col>\r\n          <ListGroup id=\"files\">            \r\n                {props.user.files.map((f,index) =>\r\n                <ListGroup.Item action href={\"images/\"+f.src} key={index}>{f.src} \r\n                </ListGroup.Item>)}\r\n            </ListGroup>\r\n            </Col>\r\n          <Col>\r\n            <form onSubmit={(e)=>props.upload(e)} id=\"farmer\" method=\"POST\" encType=\"multipart/form-data\">\r\n              \r\n              <input type=\"file\" id=\"attachment\" name=\"attachment\" onChange={props.chooseFile}/>\r\n              <button type=\"submit\">Upload File</button>\r\n          </form>\r\n          </Col>  \r\n        </Row>\r\n      </Container>\r\n  \r\n      \r\n  </div>\r\n    );\r\n  }\r\n  \r\n  export default FileList;\r\n\r\n  ","import React from 'react';\r\nimport {Navbar} from 'react-bootstrap';\r\n\r\nfunction NavbarBrand(props){\r\n    return (\r\n        <div>            \r\n            <Navbar.Brand href={props.link}>\r\n            <img\r\n                src={props.src}\r\n                width={props.width}\r\n                height= {props.height}         \r\n                alt={props.alt}\r\n            />\r\n            </Navbar.Brand>        \r\n            <Navbar.Brand href={props.link}>Farmers & Files</Navbar.Brand>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default NavbarBrand;","import React from 'react';\r\nimport {Navbar} from 'react-bootstrap';\r\nimport NavbarBrand from './NavbarBrand';\r\nfunction MyHeader(){\r\n    return (\r\n        <Navbar  bg=\"dark\" variant=\"dark\">\r\n            <NavbarBrand src=\"img/logo-shrunk.png\" width={30} height={30} alt=\"Farmer At Hand Logo\" link=\"\"/>                                  \r\n            <Navbar.Toggle />\r\n            <Navbar.Collapse className=\"justify-content-end\">\r\n                <Navbar.Text>\r\n                Source Code in <a href=\"https://github.com/maenmulhemeng/interviewfarmer.git\">GitHub</a>\r\n                </Navbar.Text>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\n// Make it public \r\nexport default MyHeader;","import React from 'react';\r\nimport {Image,Navbar} from 'react-bootstrap';\r\nimport NavbarBrand from './NavbarBrand';\r\nfunction MyFooter(){\r\n    return (\r\n        <Navbar   bg=\"dark\" variant=\"dark\">\r\n          \r\n          <NavbarBrand src=\"img/logo-shrunk.png\" width={30} height={30} alt=\"Farmer At Hand Logo\" link=\"\"/>        \r\n                 \r\n        <Navbar.Toggle />\r\n        <Navbar.Collapse className=\"justify-content-end\">\r\n            <Navbar.Text>\r\n                Developed by <code>Maen Mulhem</code> @2019 - Thanks for <a href=\"https://globaltalentaccelerator.com/\">\r\n                <Image src=\"img/GTA.png\" width=\"40\" alt=\"Global Talent Accelerator\"/>\r\n                </a>\r\n            </Navbar.Text>\r\n            \r\n        </Navbar.Collapse>   \r\n        \r\n        <Navbar.Collapse className=\"justify-content-end\">\r\n            <Navbar.Text>\r\n            Source Code in <a href=\"https://github.com/maenmulhemeng/interviewfarmer.git\">GitHub</a>\r\n            </Navbar.Text>\r\n        </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\n// Make it public \r\nexport default MyFooter;","/*\r\n  The component that shows a list of users, I call them farmers for convinient \r\n  the component talks to the server to get the list of users\r\n  using two method. The first is fetch and the second is axios \r\n  just to show that we can handle talking to the server using different methods. \r\n  The component passes parameter and handlers to its child i.e the parent configure the children\r\n\r\n*/\r\n\r\nimport React from 'react';\r\nimport {Image,Row,Col,ListGroup,Container} from 'react-bootstrap';\r\nimport Note from './Note';\r\nimport FileList from './FileList';\r\nimport MyHeader from './MyHeader';\r\nimport MyFooter from './MyFooter';\r\nconst axios = require(\"axios\");\r\n\r\n//import './App.css';\r\nclass Farmers extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      users:[],    \r\n      selectedUSer:{files:[]},\r\n      showList:false\r\n    }\r\n    this.getFiles = this.getFiles.bind(this);\r\n    this.chooseFile = this.chooseFile.bind(this);\r\n    this.submit = this.submit.bind(this);\r\n  }\r\n  \r\n  componentDidMount(){          \r\n    const httpOptions ={method:'GET'};\r\n    fetch('/users/',httpOptions)\r\n    .then((result)=>{  \r\n        \r\n        if(result.ok){                        \r\n            return result.json();            \r\n        }\r\n    }).then(r=>{\r\n     //   console.log(r);\r\n        this.setState({\r\n            users: r\r\n        });\r\n    });\r\n  }\r\n\r\n  getFiles(e,userid){\r\n    e.preventDefault();\r\n    this.setState({\r\n      showList:true\r\n    });\r\n    fetch('/users/'+userid+'/files')\r\n    .then((result)=>{  \r\n        \r\n        if(result.ok){                        \r\n            return result.json();            \r\n        }\r\n    }).then(r=>{\r\n        const user = this.state.users.find(e=>e.id === userid);\r\n        const newUser = {...user,files:r};\r\n        this.setState({\r\n            users:this.state.users.map(e=>e.id ===userid? newUser:e),\r\n            selectedUSer:newUser\r\n        })\r\n        console.log(this.state.users);  \r\n\r\n    });\r\n  }\r\n\r\n  chooseFile(e) {\r\n    this.setState({file:e.target.files[0]});\r\n    }\r\n\r\n  submit(e){\r\n      e.preventDefault();\r\n      const formData = new FormData();\r\n      formData.append('attachment',this.state.file);\r\n     \r\n      //const httpOptions ={method:'POST',headers: {'Content-Type':\"multipart/form-data\",data:formData},body:formData};\r\n      const config = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data'\r\n        }\r\n    };\r\n      axios.post('/users/'+this.state.selectedUSer.id+\"/files\",formData,config)        \r\n        .then((result)=>{  \r\n            \r\n            if(result){                        \r\n              var newFiles = [...this.state.selectedUSer.files,result.data];\r\n              var newUser = {...this.state.selectedUSer,files:newFiles};\r\n              console.log(newUser);\r\n                this.setState({\r\n                    selectedUSer: newUser\r\n                });              \r\n            }\r\n        });\r\n  }\r\n  render() {\r\n      \r\n    return (\r\n      <div className=\"App\">\r\n          <MyHeader />\r\n          <Note />\r\n          \r\n          <section id=\"farmersSection\">\r\n          <Container>\r\n          <Row><h3>List of Farmers</h3></Row>\r\n            <Row>\r\n              <Col>\r\n                <ListGroup  id=\"farmers\">\r\n                      {this.state.users.map((u,index)=>(\r\n                          <ListGroup.Item action href={\"#link\"+index} \r\n                          onClick={(e)=>this.getFiles(e,u.id)} key={index}>\r\n                            {u.name!==undefined?u.name.charAt(0).toUpperCase() +u.name.substring(1):\"\"}\r\n                            \r\n                          </ListGroup.Item>))}                \r\n                </ListGroup>\r\n              </Col>\r\n              </Row>\r\n              <Row>\r\n                {this.state.showList? <FileList upload={this.submit} chooseFile={this.chooseFile} user={this.state.selectedUSer}/> : <div></div>}\r\n              </Row>\r\n              \r\n          </Container>\r\n          \r\n            \r\n          \r\n      </section>   \r\n      <br/>\r\n          <MyFooter />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Farmers;\r\n","import React from 'react';\n\n\nimport Farmers from './components/Farmers';\n\n//import './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Farmers />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}